=====================================
OEP-15: Course-wide JS and CSS Assets
=====================================

+---------------+----------------------------------------------------+
| OEP           | :doc:`OEP-15 </oeps/oep-0015>`                     |
+---------------+----------------------------------------------------+
| Title         | Author-specified Course-wide JS and CSS            |
+---------------+----------------------------------------------------+
| Last Modified | 2016-08-29                                         |    <<<<<<<<<<<<<<<<< TODO
+---------------+----------------------------------------------------+
| Author        | Martin Segado <msegado@mit.edu>                    |
+---------------+----------------------------------------------------+
| Arbiter       |                                                    |
+---------------+----------------------------------------------------+
| Status        | Draft                                              |
+---------------+----------------------------------------------------+
| Type          | Product Enhancement                                |
+---------------+----------------------------------------------------+
| Created       | 2016-08-29                                         |    <<<<<<<<<<<<<<<<< TODO
+---------------+----------------------------------------------------+
| Resolution    |                                                    |
+---------------+----------------------------------------------------+
| References    | - `Initial OEP suggestion`_ on the edx-code list   |
|               | - `An edx-code question`_ from another user at MIT |
|               |   who was hoping to include course-wide JS/CSS     |
+---------------+----------------------------------------------------+

.. _Initial OEP suggestion: https://groups.google.com/d/topic/edx-code/T83TDxhH74E/discussion
.. _An edx-code question: https://groups.google.com/d/topic/edx-code/idjPWUIx8Ls/discussion

Abstract
========

The Open edX platform is a powerful tool for both content authoring and learning-sciences research, in part due to its support for including arbitrary JavaScript and CSS assets in course materials; custom scripts, for example, allow researchers to conduct novel experiments and log custom learner interaction events for analysis. Unfortunately, deploying and maintaining such assets across an entire course (or multiple courses) is a significant challenge, especially in Studio-based workflows where :code:`<script type="text/javascript">` or :code:`<style>` elements must be included manually in every vertical. As an alternative, this OEP proposes a mechanism for authors to include custom JavaScript and CSS assets across an entire course using a policy key. The implementation is fully backward-compatible and leverages existing XBlock infrastructure to include the assets into the LMS.

Motivation
==========

- benefits:
  - faciliatate research (especially multi-course deployment)
    - e.g., Logging custom events (this alone make the platform even more valuable for conducting research) 
  - enable easier deployment of standardized scripts/styles
    - org level: harvard's JS
    - course level: styles for "warnings", etc. / Consistently styling course content (e.g., by creating classes for things like callout boxes or image alignment)
  - enable inclusion of libraries/styles for things like course-wide code block syntax highlighting or dynamically-rendered mathematical graphs
  - allow for inclusion + rapid iteration on experimental features (e.g., one course at MIT includes a course-material search bar; again, complete with event logging for - research)


- existing processes:
  - inline script/style tags
    - works, but deployment requires scripting (or build step in e.g. latex2edx) or manual copying

  - xblocks
    - can't inject allow course-wide content (can only live inside verticals)
    - can't use within other content (e.g., as a code syntax highligter in a problem description)
    - must be accepted and enabled by the hosting platform; harder to iterate, and not necessarily relevant to *all* courses on that platform for things like smaller-scale research studies
    - these features make it good for custom content types, but not for general research scripts or broad course-wide utilities/styling

    - the proposal to `allow XBlocks to be displayed in a course tab` (an idea refered to as `course-level XBlock views` in an earlier discussion) would allow inclusion in a top-level tab, but they are not displayed at the same time as the courseware and so would not be a viable solution. They also have the other drawbacks of xblocks discussed above.

.. _course-level XBlock views: https://groups.google.com/d/topic/edx-code/Xlfof0JFlMo/discussion
.. _allow XBlocks to be displayed in a course tab XBlock tabs: https://groups.google.com/d/topic/edx-code/ywjXV0wzQiw/discussion


Specification
=============

- Add a new policy key (name TBD) for course-wide assets:

.. code-block:: json

   {
     "web_assets": [
       "/static/mystyles.css",
       "/static/experiment.js",
       "//somecdn.com/library.js"
     ]
   }

The courseware template already receives and renders an XBlock fragment (which includes JS and CSS resources); additional resources could simply be added to this fragment `when the courseware context is created`_. This approach leverages the existing XBlock/Django infrastructure to handle de-duping and rendering, so I expect little code would be needed for the actual implementation.

.. _when the courseware context is created: https://github.com/edx/edx-platform/blob/add4d3bce3bd5a9a1a5ce4f3cbf9d416c6eb1ee2/lms/djangoapps/courseware/views/index.py#L373-L437

Rationale
=========

- stems from my current position as a researcher [difficulty deploying a study to several courses] and former position working on content with a course team
- at least some additional interest at MIT + likely interest at Harvard

- alternate designs:
  - a general purpose XML processing script to be used with course export/import
    - adds work for Studio-based courses + doesn't keep content stay in sync automatically

- only public discussion so far: [edx code link]

"This approach leverages the existing XBlock/Django infrastructure to handle de-duping and rendering"

- concerns/objections so far:

Possible concerns & mitigation strategies:

 - I think some of your use cases would be better handled through XBlock dependencies. For example, IMO a complex feature like code syntax highlighting should be associated with a particular XBlock, rather than being added to an Advanced HTML block. Having the assets tied to the course means that even if the block in question is removed, the assets would still be loaded. It would be better to have them requested on-demand by only the blocks that need them. Having said that, we don't have a mechanism in XBlock to allow multiple blocks to share the same library.

Yeah, I see what you're saying - there's definitely a risk of vestigial libraries being loaded with this approach (or libraries just being loaded earlier than needed). On the other hand, XBlocks also don't seem to me like a great fit for syntax highlighting or similar use cases... some specific concerns:
Developing new XBlocks requires enough know-how than it's likely out of reach for course authors (compared to, e.g., dropping in the script/CSS files for PrismJS to add syntax highlighting course-wide)
XBlocks have to be accepted/installed into the platform before being used [I think?], while scripts/CSS resources can be added immediately by course authors
XBlocks can't currently be nested inside <problem> or <html> modules, so they're not great for things that might appear interspersed with text like code examples or graphs
 - There are performance implications to loading a number of individual files like this. Having said that, it would be difficult to have individual courses contribute files to the static asset pipeline, since courses can be created/imported after the LMS has been stood up.

Agreed, though hopefully this will be less of an issue when HTTP/2 takes over sometime in the not-too-distant future =) The fact that static assets are cached should help in the meantime... it looks like edX sets the Cache-Control max-age to 1 year, and external JavaScript CDNs probably have fairly efficient caching behavior too.

Some additional questions raised by Andy Armstrong on edx-code:

  - I'd like to consider how such a mechanism should interact with AMD-style loading. We have had some preliminary experimentation with combining XBlocks with RequireJS, and I think it is important to take that into account.
    > my suggestion: deal with this at the level of the xblock runtime. changes will take automatically

  - We might want to make this feature be something that can be disabled if a given installation is not comfortable with giving this power to its authors. As you point out, the power is already there through multiple other mechanisms, so maybe this isn't a concern.


Security. Again, though, the ability to include arbitrary JavaScript in a course already exists... this feature just provides a more elegant way to do so course-wide. It is possible that making it easier would lead to wider script usage and thus increase the odds of users creating a vulnerability; this could be mitigated by (1) adding a stern warning to the policy key description about including scripts only from trusted origins, or (2) limiting this feature to /static/* files if it's a really big concern.

Support. Platform hosts such as edX should make it clear that this is a power-user feature that would carry no support beyond that for current <script> and <style> tags (i.e., the platform guarantees that your scripts will make it into the page, but you're on your own if they don't work or if something breaks due to platform changes). As with security above, it's possible there will be more complaints/support requests from users simply because of wider script/CSS usage, though good documentation and a warning in the policy key description should hopefully keep these to a minimum.

Backward Compatibility
=======================

The proposed feature does not introduce any known backward incompatibilities.

Reference Implementation
========================

(This section will link to an edX platform pull request after the OEP is accepted and an implementation written.)

Rejected Alternatives
=====================

- primary alternative is the scripting approach, which would be separate to the platform.
  - rejected/shelved because...?
    - might have value on its own, but for this application, it seems like a hack to include script tags all over the place...?

- (any other alternative designs or implementations that were considered and rejected?)
