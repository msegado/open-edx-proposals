=====================================
OEP-15: Course-wide Custom JavaScript
=====================================

+---------------+----------------------------------------------------+
| OEP           | :doc:`OEP-15 </oeps/oep-0015>`                     |
+---------------+----------------------------------------------------+
| Title         | Course-wide Custom JavaScript                      |
+---------------+----------------------------------------------------+
| Last Modified | 2016-08-29                                         |    <<<<<<<<<<<<<<<<< TODO
+---------------+----------------------------------------------------+
| Author        | Martin Segado <msegado@mit.edu>                    |
+---------------+----------------------------------------------------+
| Arbiter       |                                                    |
+---------------+----------------------------------------------------+
| Status        | Draft                                              |
+---------------+----------------------------------------------------+
| Type          | Product Enhancement                                |
+---------------+----------------------------------------------------+
| Created       | 2016-08-29                                         |    <<<<<<<<<<<<<<<<< TODO
+---------------+----------------------------------------------------+
| Resolution    |                                                    |
+---------------+----------------------------------------------------+
| References    | - `Initial OEP suggestion`_ on the edx-code list   |
|               | - `An edx-code question`_ from another user at MIT |
|               |   who was hoping to include course-wide JS/CSS     |
+---------------+----------------------------------------------------+

.. _Initial OEP suggestion: https://groups.google.com/d/topic/edx-code/T83TDxhH74E/discussion
.. _An edx-code question: https://groups.google.com/d/topic/edx-code/idjPWUIx8Ls/discussion

Abstract
========

The Open edX platform is a powerful tool for both content authoring and learning-sciences research, in part due to its support for including arbitrary JavaScript in course materials; for example, such scripts can enable researchers to conduct novel experiments and log custom learner interaction events for analysis. Unfortunately, deploying and maintaining JavaScript assets across an entire course (or multiple courses) is a significant challenge, especially in Studio-based workflows where :code:`<script type="text/javascript">` elements must be included manually in every vertical. As an alternative, this OEP proposes a mechanism for authors to include custom JavaScript across an entire course using a policy key. The implementation is fully backward-compatible and leverages existing XBlock infrastructure to include scripts in the LMS.

Motivation
==========

The primary goal of this OEP is to facilitate research and experimentation by removing the bariers to large-scale JavaScript inclusion. Simplifying the inclusion of scripts is especially important for experiments spanning many courses (e.g., all MITx courses): it is not reasonable to expect all course teams at an institution to manually modify every single vertical in their course to include a research script as is the case with the current platform, but it is quite feasible to request that they make a single easy-to-reverse change to their course policy.

As an additional benefit, a course-wide JavaScript mechanism would also simplify the use of course- or institution-wide utility scripts; HarvardX, for example, maintains a custom JS library for course authors.

Specification
=============

The proposed implementation adds a new policy key for custom course-wide scripts (name TBD):

.. code-block:: json

   {
     "global_scripts": [
       "/static/experiment.js",
       "//some.cdn.com/library.js"
     ]
   }

Since the edX courseware template already receives and renders an XBlock fragment (which includes JavaScript resources), additional script resources would simply be added to this fragment `when the courseware context is created`_.

.. _when the courseware context is created: https://github.com/edx/edx-platform/blob/d497e194623dd32ad5a66f141529129267db645c/lms/djangoapps/courseware/views/index.py#L372-L441

Rationale
=========

The approach above leverages the existing XBlock/Django infrastructure to handle de-duping and rendering, so little new code should be needed for a working implementation. A course policy setting (which would appear on the *Advanced Settings* page of edX Studio) is a good fit for the user-facing portion of the feature:

- Research script inclusion fits well within the `existing description and warning`_ on the Studio *Advanced Settings* page:
    **What do advanced settings do?**

    Advanced settings control specific course functionality. On this page, you can edit manual policies, which are JSON-based key and value pairs that control specific course settings.

    Any policies you modify here override all other information you've defined elsewhere in Studio. Do not edit policies unless you are familiar with both their purpose and syntax.

- A policy setting requires no additional UI (display and editing is already handled by Studio), reducing implementation and maintenance burden

- Policy settings are conceptually course-wide in scope, which matches the scope of course-wide scripts

.. _existing description and warning: https://github.com/edx/edx-platform/blob/d497e194623dd32ad5a66f141529129267db645c/cms/templates/settings_advanced.html#L83-L86

Why not XBlocks?
----------------

Custom XBlocks cannot be instantiated at the top level of the courseware; as with script tags, they would need to be added to every vertical in a course for course-wide experiments. The `XBlock course tabs` idea on edx-code (originally referred to as `course-level XBlock views`) would permit blocks to be loaded outside of verticals, but these would only be active when a user explicitly navigates to their tab, not when users are interacting with the courseware as required here.

.. _course-level XBlock views: https://groups.google.com/d/topic/edx-code/Xlfof0JFlMo/discussion
.. _XBlock course tabs: https://groups.google.com/d/topic/edx-code/ywjXV0wzQiw/discussion

What about performance?
-----------------------

A few issues raised in the initial `edx-code thread` centered around performance. The first concerns the use of this feature to load JavaScript libraries (e.g., for things like course-wide code syntax highlighting):

    "Having the assets tied to the course means that even if the block [using such assets] is removed, the assets would still be loaded. It would be better to have them requested on-demand by only the blocks that need them. Having said that, we don't have a mechanism in XBlock to allow multiple blocks to share the same library."

This is a valid point; there's a risk of vestigial libraries being loaded with this approach. The simplest way to address this concern is to recommend that authors not use this feature for libraries and instead continue loading these using the existing mechanism (i.e., by adding script tags in any blocks where they are needed).

    "I'd like to consider how such a mechanism should interact with AMD-style loading. We have had some preliminary experimentation with combining XBlocks with RequireJS, and I think it is important to take that into account."

I believe this should be handled automatically; since the proposed implementation for this OEP relies on the XBlock runtime to load scripts, any future changes to the runtime's loading strategy will also affect course-wide scripts.

    "There are performance implications to loading a number of individual files like this. Having said that, it would be difficult to have individual courses contribute files to the static asset pipeline, since courses can be created/imported after the LMS has been stood up."

Agreed, though hopefully this will be less of an issue when HTTP/2 takes over in the not-too-distant future. The fact that static assets are cached should help in the meantime; it looks like edX sets the Cache-Control max-age to 1 year, and external JavaScript CDNs should also have reasonable caching behavior.

What about security?
--------------------

....... TODO

The ability to include arbitrary JavaScript in a course already exists; this feature just provides a more elegant way to do so course-wide. It is possible that making it easier would lead to wider script usage and thus increase the odds of users creating a vulnerability; this could be mitigated by (1) adding a stern warning to the policy key description about including scripts only from trusted origins, or (2) limiting this feature to /static/* files if it's a really big concern.

    "We might want to make this feature be something that can be disabled if a given installation is not comfortable with giving this power to its authors. As you point out, the power is already there through multiple other mechanisms, so maybe this isn't a concern."


What about compatibility and support?
-------------------------------------

Platform hosts such as edX should make it clear that this is a power-user feature that would carry no support beyond that for current <script> and <style> tags (i.e., the platform guarantees that your scripts will make it into the page, but you're on your own if they don't work or if something breaks due to platform changes). As with security above, it's possible there will be more complaints/support requests from users simply because of wider script/CSS usage, though good documentation and a warning in the policy key description should hopefully keep these to a minimum.

........ TODO

Backward Compatibility
=======================

The proposed feature does not introduce any known backward incompatibilities.

Reference Implementation
========================

(This section will link to an edX platform pull request after the OEP is accepted and an implementation written.)

Rejected Alternatives
=====================

.. - alternate designs:
..   - a general purpose XML processing script to be used with course export/import
..     - adds work for Studio-based courses + doesn't keep content stay in sync automatically

.. - primary alternative is the scripting approach, which would be separate to the platform.
..   - rejected/shelved because...?
..     - might have value on its own, but for this application, it seems like a hack to include script tags all over the place...?


.. - extra_scripts property, rather than top level?

.. - (any other alternative designs or implementations that were considered and rejected?)
